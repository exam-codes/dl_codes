#using prettrained models
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import numpy as np

# Load pre-trained VGG16 model with ImageNet weights
model = VGG16(weights="imagenet")

# Load and preprocess image
img_path = "/content/Dog.jpg"  # Make sure the image exists at this path
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Predict and decode top 3 results
predictions = decode_predictions(model.predict(img_array), top=3)[0]

# Display predictions
for _, name, confidence in predictions:
    print(f"{name}: {confidence:.2%}")





from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import numpy as np

# Load pre-trained ResNet50 model with ImageNet weights
model = ResNet50(weights="imagenet")

# Load and preprocess image
img_path = "/content/Dog.jpg"  # Make sure this image exists
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Predict and decode top 3 predictions
predictions = decode_predictions(model.predict(img_array), top=3)[0]

# Print predictions
for _, name, confidence in predictions:
    print(f"{name}: {confidence:.2%}")





from tensorflow.keras.applications import MobileNet
from tensorflow.keras.applications.mobilenet import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import numpy as np

# Load pre-trained MobileNet model
model = MobileNet(weights="imagenet")

# Load and preprocess the image
img_path = "/content/Dog.jpg"  # Make sure the image exists
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

# Predict and decode top 3 predictions
predictions = model.predict(img_array)
top_preds = decode_predictions(predictions, top=3)[0]

# Print top-3 results
for _, name, confidence in top_preds:
    print(f"{name}: {confidence:.2%}")
