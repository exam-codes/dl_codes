#creating functions to compute various losses
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Input
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import BinaryCrossentropy, MeanSquaredError, MeanAbsoluteError

# Step 1: Load the dataset
df = pd.read_csv("medium_data.csv")

# Step 2: Drop unnecessary columns
df.drop(columns=['id', 'url', 'title', 'subtitle', 'date'], inplace=True)

# Step 3: Handle missing values (if any)
df.dropna(inplace=True)

# Step 4: Create binary target column
df['popular'] = (df['claps'] >= 500).astype(int)

# Step 5: Encode categorical columns
label_encoder = LabelEncoder()
df['publication'] = label_encoder.fit_transform(df['publication'])

# Step 6: Separate features and target
X = df[['responses', 'reading_time', 'publication']]
y = df['popular']

# Step 7: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 8: Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train).astype('float32')
X_test = scaler.transform(X_test).astype('float32')

# Step 9: Build the model
model = Sequential([
    Input(shape=(X_train.shape[1],)),
    Dense(10, activation='relu'),
    Dense(8, activation='relu'),
    Dense(1, activation='sigmoid')  # binary classification
])

# Step 10: Compile the model
optimizer = Adam(learning_rate=1e-4, clipnorm=1.0)
model.compile(optimizer=optimizer,
              loss=BinaryCrossentropy(),
              metrics=['accuracy', MeanSquaredError(), MeanAbsoluteError()])

# Step 11: Train the model
model.fit(X_train, y_train, epochs=20, batch_size=4, validation_data=(X_test, y_test), verbose=1)

# Step 12: Evaluate the model
loss_bce, accuracy, mse, mae = model.evaluate(X_test, y_test)

print(f"Binary Crossentropy Loss: {loss_bce:.4f}")
print(f"Test Accuracy: {accuracy:.4f}")
print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"Mean Absolute Error (MAE): {mae:.4f}")
